// Admin Panel JavaScript - Version Debug pour diagnostiquer les probl√®mes

console.log('üîç D√©marrage du mode debug admin...');

// Variables globales
let currentUser = null;
let products = [];
let orders = [];

// √âl√©ments DOM
const loginScreen = document.getElementById('loginScreen');
const adminDashboard = document.getElementById('adminDashboard');
const loginForm = document.getElementById('loginForm');
const loginError = document.getElementById('loginError');

// Fonction de diagnostic Firebase
function diagnoseFirebase() {
    console.log('üîç Diagnostic Firebase...');
    
    // V√©rifier si Firebase est charg√©
    console.log('Firebase disponible:', typeof firebase !== 'undefined');
    
    if (typeof firebase !== 'undefined') {
        console.log('Firebase app:', !!firebase.app);
        console.log('Firebase auth:', !!firebase.auth);
        console.log('Firebase firestore:', !!firebase.firestore);
        
        try {
            const auth = firebase.auth();
            console.log('Auth instance:', !!auth);
            console.log('Auth currentUser:', auth.currentUser);
        } catch (error) {
            console.error('Erreur auth:', error);
        }
        
        try {
            const db = firebase.firestore();
            console.log('Firestore instance:', !!db);
        } catch (error) {
            console.error('Erreur firestore:', error);
        }
    }
}

// Initialisation avec diagnostic
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initialisation du panneau admin (mode debug)...');
    
    // Diagnostic imm√©diat
    diagnoseFirebase();
    
    // Attendre un peu puis r√©essayer
    setTimeout(() => {
        console.log('üîç Second diagnostic apr√®s 2 secondes...');
        diagnoseFirebase();
        initializeAdmin();
    }, 2000);
});

function initializeAdmin() {
    console.log('üîß Initialisation admin...');
    
    // V√©rifier si Firebase est charg√©
    if (typeof firebase === 'undefined') {
        console.error('‚ùå Firebase non disponible');
        showError('Firebase n\'est pas charg√©. Veuillez actualiser la page.');
        return;
    }

    console.log('‚úÖ Firebase d√©tect√©');

    try {
        // Test de connexion Firebase
        console.log('üß™ Test de connexion Firebase...');
        
        // √âcouter les changements d'authentification avec gestion d'erreur
        firebase.auth().onAuthStateChanged((user) => {
            console.log('üîê √âtat d\'authentification:', user ? 'Connect√©' : 'D√©connect√©');
            if (user) {
                console.log('üë§ Utilisateur:', user.email);
                currentUser = user;
                showDashboard();
            } else {
                console.log('üë§ Aucun utilisateur connect√©');
                showLoginScreen();
            }
        }, (error) => {
            console.error('‚ùå Erreur d\'authentification:', error);
            showLoginError('Erreur de connexion Firebase: ' + error.message);
        });

        // Configurer les event listeners
        setupEventListeners();
        
        console.log('‚úÖ Initialisation termin√©e');
        
    } catch (error) {
        console.error('‚ùå Erreur d\'initialisation Firebase:', error);
        showError('Erreur d\'initialisation: ' + error.message);
    }
}

function setupEventListeners() {
    console.log('üéØ Configuration des event listeners...');
    
    // Formulaire de connexion
    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
        console.log('‚úÖ Event listener login configur√©');
    } else {
        console.error('‚ùå Formulaire de login non trouv√©');
    }

    // Menu de navigation
    const menuItems = document.querySelectorAll('.menu-item');
    console.log('üìã Menu items trouv√©s:', menuItems.length);
    
    menuItems.forEach(item => {
        item.addEventListener('click', handleNavigation);
    });

    // D√©connexion
    const logoutBtn = document.querySelector('.logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
        console.log('‚úÖ Event listener logout configur√©');
    }

    console.log('‚úÖ Event listeners configur√©s');
}

// Fonctions d'authentification avec debug
async function handleLogin(e) {
    e.preventDefault();
    console.log('üîë Tentative de connexion...');
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    
    console.log('üìß Email saisi:', email);
    console.log('üîí Mot de passe saisi:', password ? 'Oui' : 'Non');
    
    if (!email || !password) {
        console.log('‚ùå Champs manquants');
        showLoginError('Veuillez remplir tous les champs');
        return;
    }
    
    // V√©rifier la connexion Firebase avant de tenter la connexion
    if (typeof firebase === 'undefined' || !firebase.auth) {
        console.error('‚ùå Firebase non initialis√©');
        showLoginError('Erreur: Firebase non initialis√©. Veuillez actualiser la page.');
        return;
    }
    
    try {
        console.log('‚è≥ D√©but de la connexion...');
        showLoading('Connexion en cours...');
        
        console.log('üî• Firebase Auth disponible:', !!firebase.auth());
        
        // Test de connectivit√© r√©seau
        console.log('üåê Test de connectivit√©...');
        
        // Ajouter un timeout pour √©viter les blocages
        const loginPromise = firebase.auth().signInWithEmailAndPassword(email, password);
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout de connexion')), 15000)
        );
        
        console.log('üöÄ Envoi de la requ√™te de connexion...');
        const userCredential = await Promise.race([loginPromise, timeoutPromise]);
        
        console.log('‚úÖ Connexion r√©ussie:', userCredential.user.email);
        console.log('üë§ UID:', userCredential.user.uid);
        
        hideLoading();
        
    } catch (error) {
        console.error('‚ùå Erreur de connexion compl√®te:', error);
        console.error('‚ùå Code d\'erreur:', error.code);
        console.error('‚ùå Message d\'erreur:', error.message);
        
        hideLoading();
        
        // Messages d'erreur plus sp√©cifiques
        let errorMessage = '';
        
        if (error.message === 'Timeout de connexion') {
            errorMessage = 'Timeout de connexion. V√©rifiez votre connexion internet et r√©essayez.';
        } else if (error.code === 'auth/network-request-failed') {
            errorMessage = 'Erreur r√©seau. V√©rifiez votre connexion internet.';
        } else if (error.code === 'auth/too-many-requests') {
            errorMessage = 'Trop de tentatives. Attendez quelques minutes avant de r√©essayer.';
        } else if (error.code === 'auth/user-not-found') {
            errorMessage = 'Utilisateur non trouv√©. V√©rifiez votre email.';
        } else if (error.code === 'auth/wrong-password') {
            errorMessage = 'Mot de passe incorrect.';
        } else if (error.code === 'auth/invalid-email') {
            errorMessage = 'Format d\'email invalide.';
        } else if (error.code === 'auth/user-disabled') {
            errorMessage = 'Compte d√©sactiv√©.';
        } else if (error.code === 'auth/invalid-credential') {
            errorMessage = 'Identifiants invalides.';
        } else {
            errorMessage = 'Erreur de connexion: ' + error.message;
        }
        
        console.log('üìù Message d\'erreur affich√©:', errorMessage);
        showLoginError(errorMessage);
    }
}

async function handleLogout() {
    console.log('üëã Tentative de d√©connexion...');
    try {
        await firebase.auth().signOut();
        console.log('‚úÖ D√©connexion r√©ussie');
    } catch (error) {
        console.error('‚ùå Erreur de d√©connexion:', error);
        showError('Erreur lors de la d√©connexion: ' + error.message);
    }
}

// Fonctions d'affichage avec debug
function showLoginScreen() {
    console.log('üì± Affichage √©cran de connexion');
    if (loginScreen) {
        loginScreen.style.display = 'flex';
        console.log('‚úÖ √âcran de connexion affich√©');
    } else {
        console.error('‚ùå √âl√©ment loginScreen non trouv√©');
    }
    
    if (adminDashboard) {
        adminDashboard.style.display = 'none';
        console.log('‚úÖ Dashboard masqu√©');
    }
    
    // R√©initialiser le formulaire
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    if (emailInput) emailInput.value = '';
    if (passwordInput) passwordInput.value = '';
    
    // NE PAS afficher d'erreur au chargement initial
    if (loginError) {
        loginError.textContent = '';
        loginError.style.display = 'none';
    }
}

function showDashboard() {
    console.log('üìä Affichage dashboard');
    if (loginScreen) {
        loginScreen.style.display = 'none';
        console.log('‚úÖ √âcran de connexion masqu√©');
    }
    
    if (adminDashboard) {
        adminDashboard.style.display = 'flex';
        console.log('‚úÖ Dashboard affich√©');
    } else {
        console.error('‚ùå √âl√©ment adminDashboard non trouv√©');
    }
    
    // Afficher l'email de l'admin
    const adminEmailElement = document.getElementById('adminEmail');
    if (adminEmailElement && currentUser) {
        adminEmailElement.textContent = currentUser.email;
        console.log('‚úÖ Email admin affich√©:', currentUser.email);
    }
}

function showLoginError(message) {
    console.log('‚ö†Ô∏è Erreur de connexion:', message);
    if (loginError) {
        loginError.textContent = message;
        loginError.style.display = 'block';
        console.log('‚úÖ Message d\'erreur affich√©');
    } else {
        console.error('‚ùå √âl√©ment loginError non trouv√©');
    }
}

// Navigation basique
function handleNavigation(e) {
    e.preventDefault();
    console.log('üß≠ Navigation cliqu√©e');
    
    const sectionName = e.target.getAttribute('data-section');
    console.log('üìç Section:', sectionName);
    
    if (!sectionName) return;

    // Mettre √† jour le menu actif
    document.querySelectorAll('.menu-item').forEach(item => {
        item.classList.remove('active');
    });
    e.target.classList.add('active');

    // Afficher la section correspondante
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.remove('active');
    });
    
    const sectionElement = document.getElementById(sectionName + 'Section');
    if (sectionElement) {
        sectionElement.classList.add('active');
        console.log('‚úÖ Section affich√©e:', sectionName);
    } else {
        console.error('‚ùå Section non trouv√©e:', sectionName + 'Section');
    }

    // Mettre √† jour le titre de la page
    const titles = {
        dashboard: 'Dashboard',
        products: 'Gestion des Produits',
        orders: 'Gestion des Commandes',
        account: 'Mon Compte',
        analytics: 'Statistiques',
        settings: 'Param√®tres'
    };
    
    const pageTitleElement = document.getElementById('pageTitle');
    if (pageTitleElement) {
        pageTitleElement.textContent = titles[sectionName] || sectionName;
        console.log('‚úÖ Titre mis √† jour:', titles[sectionName] || sectionName);
    }
}

// Fonctions d'affichage des messages
function showError(message) {
    console.error('‚ùå', message);
    alert('Erreur: ' + message);
}

function showSuccess(message) {
    console.log('‚úÖ', message);
    alert('Succ√®s: ' + message);
}

function showLoading(message) {
    console.log('‚è≥', message);
    // Impl√©mentation basique du loading
}

function hideLoading() {
    console.log('‚úÖ Loading termin√©');
    // Impl√©mentation basique du loading
}

console.log('‚úÖ Admin panel debug initialis√©');