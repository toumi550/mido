// Admin Panel JavaScript - Version Debug pour diagnostiquer les probl√®mes

console.log('üîç D√©marrage du mode debug admin...');

// Variables globales
let currentUser = null;
let products = [];
let orders = [];

// √âl√©ments DOM
const loginScreen = document.getElementById('loginScreen');
const adminDashboard = document.getElementById('adminDashboard');
const loginForm = document.getElementById('loginForm');
const loginError = document.getElementById('loginError');

// Fonction de diagnostic Firebase
function diagnoseFirebase() {
    console.log('üîç Diagnostic Firebase...');
    
    // V√©rifier si Firebase est charg√©
    console.log('Firebase disponible:', typeof firebase !== 'undefined');
    
    if (typeof firebase !== 'undefined') {
        console.log('Firebase app:', !!firebase.app);
        console.log('Firebase auth:', !!firebase.auth);
        console.log('Firebase firestore:', !!firebase.firestore);
        
        try {
            const auth = firebase.auth();
            console.log('Auth instance:', !!auth);
            console.log('Auth currentUser:', auth.currentUser);
        } catch (error) {
            console.error('Erreur auth:', error);
        }
        
        try {
            const db = firebase.firestore();
            console.log('Firestore instance:', !!db);
        } catch (error) {
            console.error('Erreur firestore:', error);
        }
    }
}

// Initialisation avec diagnostic
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initialisation du panneau admin (mode debug)...');
    
    // Diagnostic imm√©diat
    diagnoseFirebase();
    
    // Attendre un peu puis r√©essayer
    setTimeout(() => {
        console.log('üîç Second diagnostic apr√®s 2 secondes...');
        diagnoseFirebase();
        initializeAdmin();
    }, 2000);
});

function initializeAdmin() {
    console.log('üîß Initialisation admin...');
    
    // V√©rifier si Firebase est charg√©
    if (typeof firebase === 'undefined') {
        console.error('‚ùå Firebase non disponible');
        showError('Firebase n\'est pas charg√©. Veuillez actualiser la page.');
        return;
    }

    console.log('‚úÖ Firebase d√©tect√©');

    try {
        // Test de connexion Firebase
        console.log('üß™ Test de connexion Firebase...');
        
        // √âcouter les changements d'authentification avec gestion d'erreur
        firebase.auth().onAuthStateChanged((user) => {
            console.log('üîê √âtat d\'authentification:', user ? 'Connect√©' : 'D√©connect√©');
            if (user) {
                console.log('üë§ Utilisateur:', user.email);
                currentUser = user;
                showDashboard();
            } else {
                console.log('üë§ Aucun utilisateur connect√©');
                showLoginScreen();
            }
        }, (error) => {
            console.error('‚ùå Erreur d\'authentification:', error);
            showLoginError('Erreur de connexion Firebase: ' + error.message);
        });

        // Configurer les event listeners
        setupEventListeners();
        
        console.log('‚úÖ Initialisation termin√©e');
        
    } catch (error) {
        console.error('‚ùå Erreur d\'initialisation Firebase:', error);
        showError('Erreur d\'initialisation: ' + error.message);
    }
}

function setupEventListeners() {
    console.log('üéØ Configuration des event listeners...');
    
    // Formulaire de connexion
    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
        console.log('‚úÖ Event listener login configur√©');
    } else {
        console.error('‚ùå Formulaire de login non trouv√©');
    }

    // Menu de navigation
    const menuItems = document.querySelectorAll('.menu-item');
    console.log('üìã Menu items trouv√©s:', menuItems.length);
    
    menuItems.forEach(item => {
        item.addEventListener('click', handleNavigation);
    });

    // D√©connexion
    const logoutBtn = document.querySelector('.logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
        console.log('‚úÖ Event listener logout configur√©');
    }

    console.log('‚úÖ Event listeners configur√©s');
}

// Fonctions d'authentification avec debug
async function handleLogin(e) {
    e.preventDefault();
    console.log('üîë Tentative de connexion...');
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    
    console.log('üìß Email saisi:', email);
    console.log('üîí Mot de passe saisi:', password ? 'Oui' : 'Non');
    
    if (!email || !password) {
        console.log('‚ùå Champs manquants');
        showLoginError('Veuillez remplir tous les champs');
        return;
    }
    
    // V√©rifier la connexion Firebase avant de tenter la connexion
    if (typeof firebase === 'undefined' || !firebase.auth) {
        console.error('‚ùå Firebase non initialis√©');
        showLoginError('Erreur: Firebase non initialis√©. Veuillez actualiser la page.');
        return;
    }
    
    try {
        console.log('‚è≥ D√©but de la connexion...');
        showLoading('Connexion en cours...');
        
        console.log('üî• Firebase Auth disponible:', !!firebase.auth());
        
        // Test de connectivit√© r√©seau
        console.log('üåê Test de connectivit√©...');
        
        // Ajouter un timeout pour √©viter les blocages
        const loginPromise = firebase.auth().signInWithEmailAndPassword(email, password);
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout de connexion')), 15000)
        );
        
        console.log('üöÄ Envoi de la requ√™te de connexion...');
        const userCredential = await Promise.race([loginPromise, timeoutPromise]);
        
        console.log('‚úÖ Connexion r√©ussie:', userCredential.user.email);
        console.log('üë§ UID:', userCredential.user.uid);
        
        hideLoading();
        
    } catch (error) {
        console.error('‚ùå Erreur de connexion compl√®te:', error);
        console.error('‚ùå Code d\'erreur:', error.code);
        console.error('‚ùå Message d\'erreur:', error.message);
        
        hideLoading();
        
        // Messages d'erreur plus sp√©cifiques
        let errorMessage = '';
        
        if (error.message === 'Timeout de connexion') {
            errorMessage = 'Timeout de connexion. V√©rifiez votre connexion internet et r√©essayez.';
        } else if (error.code === 'auth/network-request-failed') {
            errorMessage = 'Erreur r√©seau. V√©rifiez votre connexion internet.';
        } else if (error.code === 'auth/too-many-requests') {
            errorMessage = 'Trop de tentatives. Attendez quelques minutes avant de r√©essayer.';
        } else if (error.code === 'auth/user-not-found') {
            errorMessage = 'Utilisateur non trouv√©. V√©rifiez votre email.';
        } else if (error.code === 'auth/wrong-password') {
            errorMessage = 'Mot de passe incorrect.';
        } else if (error.code === 'auth/invalid-email') {
            errorMessage = 'Format d\'email invalide.';
        } else if (error.code === 'auth/user-disabled') {
            errorMessage = 'Compte d√©sactiv√©.';
        } else if (error.code === 'auth/invalid-credential') {
            errorMessage = 'Identifiants invalides.';
        } else {
            errorMessage = 'Erreur de connexion: ' + error.message;
        }
        
        console.log('üìù Message d\'erreur affich√©:', errorMessage);
        showLoginError(errorMessage);
    }
}

async function handleLogout() {
    console.log('üëã Tentative de d√©connexion...');
    try {
        await firebase.auth().signOut();
        console.log('‚úÖ D√©connexion r√©ussie');
    } catch (error) {
        console.error('‚ùå Erreur de d√©connexion:', error);
        showError('Erreur lors de la d√©connexion: ' + error.message);
    }
}

// Fonctions d'affichage avec debug
function showLoginScreen() {
    console.log('üì± Affichage √©cran de connexion');
    if (loginScreen) {
        loginScreen.style.display = 'flex';
        console.log('‚úÖ √âcran de connexion affich√©');
    } else {
        console.error('‚ùå √âl√©ment loginScreen non trouv√©');
    }
    
    if (adminDashboard) {
        adminDashboard.style.display = 'none';
        console.log('‚úÖ Dashboard masqu√©');
    }
    
    // R√©initialiser le formulaire
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    if (emailInput) emailInput.value = '';
    if (passwordInput) passwordInput.value = '';
    
    // NE PAS afficher d'erreur au chargement initial
    if (loginError) {
        loginError.textContent = '';
        loginError.style.display = 'none';
    }
}

function showDashboard() {
    console.log('üìä Affichage dashboard');
    if (loginScreen) {
        loginScreen.style.display = 'none';
        console.log('‚úÖ √âcran de connexion masqu√©');
    }
    
    if (adminDashboard) {
        adminDashboard.style.display = 'flex';
        console.log('‚úÖ Dashboard affich√©');
    } else {
        console.error('‚ùå √âl√©ment adminDashboard non trouv√©');
    }
    
    // Afficher l'email de l'admin
    const adminEmailElement = document.getElementById('adminEmail');
    if (adminEmailElement && currentUser) {
        adminEmailElement.textContent = currentUser.email;
        console.log('‚úÖ Email admin affich√©:', currentUser.email);
    }
    
    // IMPORTANT: Charger les donn√©es du dashboard
    loadDashboardData();
}

function showLoginError(message) {
    console.log('‚ö†Ô∏è Erreur de connexion:', message);
    if (loginError) {
        loginError.textContent = message;
        loginError.style.display = 'block';
        console.log('‚úÖ Message d\'erreur affich√©');
    } else {
        console.error('‚ùå √âl√©ment loginError non trouv√©');
    }
}

// ===== FONCTIONS POUR CHARGER LES DONN√âES FIREBASE =====

// Fonction pour charger les donn√©es du dashboard
async function loadDashboardData() {
    console.log('üìä Chargement des donn√©es du dashboard...');
    
    try {
        // Charger le nombre de produits
        console.log('üì¶ Chargement des produits...');
        const productsSnapshot = await firebase.firestore().collection('products').get();
        const totalProductsElement = document.getElementById('totalProducts');
        if (totalProductsElement) {
            totalProductsElement.textContent = productsSnapshot.size;
            console.log('‚úÖ Produits charg√©s:', productsSnapshot.size);
        }

        // Charger le nombre de commandes
        console.log('üõí Chargement des commandes...');
        const ordersSnapshot = await firebase.firestore().collection('orders').get();
        const totalOrdersElement = document.getElementById('totalOrders');
        if (totalOrdersElement) {
            totalOrdersElement.textContent = ordersSnapshot.size;
            console.log('‚úÖ Commandes charg√©es:', ordersSnapshot.size);
        }

        // Charger les commandes en attente
        console.log('‚è≥ Chargement des commandes en attente...');
        const pendingOrdersSnapshot = await firebase.firestore()
            .collection('orders')
            .where('status', '==', 'pending')
            .get();
        const pendingOrdersElement = document.getElementById('pendingOrders');
        if (pendingOrdersElement) {
            pendingOrdersElement.textContent = pendingOrdersSnapshot.size;
            console.log('‚úÖ Commandes en attente:', pendingOrdersSnapshot.size);
        }

        // Calculer le chiffre d'affaires total
        console.log('üí∞ Calcul du chiffre d\'affaires...');
        let totalRevenue = 0;
        ordersSnapshot.forEach(doc => {
            const order = doc.data();
            if (order.status === 'completed' && order.total) {
                const totalValue = typeof order.total === 'number' 
                    ? order.total 
                    : parseFloat(order.total.toString().replace(/[^\d]/g, ''));
                totalRevenue += totalValue || 0;
            }
        });
        
        const totalRevenueElement = document.getElementById('totalRevenue');
        if (totalRevenueElement) {
            totalRevenueElement.textContent = totalRevenue.toLocaleString() + ' DA';
            console.log('‚úÖ Chiffre d\'affaires calcul√©:', totalRevenue);
        }

        // Charger les commandes r√©centes
        await loadRecentOrders();

        console.log('‚úÖ Donn√©es du dashboard charg√©es avec succ√®s');

    } catch (error) {
        console.error('‚ùå Erreur lors du chargement du dashboard:', error);
        showError('Erreur lors du chargement des donn√©es: ' + error.message);
    }
}

// Fonction pour charger les commandes r√©centes
async function loadRecentOrders() {
    console.log('üìã Chargement des commandes r√©centes...');
    
    try {
        const recentOrdersSnapshot = await firebase.firestore()
            .collection('orders')
            .orderBy('createdAt', 'desc')
            .limit(5)
            .get();

        const recentOrdersList = document.getElementById('recentOrdersList');
        if (!recentOrdersList) {
            console.error('‚ùå √âl√©ment recentOrdersList non trouv√©');
            return;
        }

        recentOrdersList.innerHTML = '';

        if (recentOrdersSnapshot.empty) {
            recentOrdersList.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">Aucune commande r√©cente</p>';
            console.log('‚ÑπÔ∏è Aucune commande r√©cente trouv√©e');
            return;
        }

        console.log('üìù Nombre de commandes r√©centes:', recentOrdersSnapshot.size);
        recentOrdersSnapshot.forEach(doc => {
            const order = doc.data();
            console.log('üìÑ Commande r√©cente:', doc.id, order);
            const orderElement = createRecentOrderElement(order, doc.id);
            recentOrdersList.appendChild(orderElement);
        });

        console.log('‚úÖ Commandes r√©centes charg√©es');

    } catch (error) {
        console.error('‚ùå Erreur lors du chargement des commandes r√©centes:', error);
        const recentOrdersList = document.getElementById('recentOrdersList');
        if (recentOrdersList) {
            recentOrdersList.innerHTML = '<p style="text-align: center; color: #dc3545; padding: 20px;">Erreur lors du chargement des commandes r√©centes</p>';
        }
    }
}

// Fonction pour cr√©er un √©l√©ment de commande r√©cente
function createRecentOrderElement(order, orderId) {
    const div = document.createElement('div');
    div.className = 'order-item';
    
    const date = order.createdAt ? order.createdAt.toDate().toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    }) : 'N/A';
    
    const statusClass = order.status || 'pending';
    const statusText = getStatusText(order.status);
    
    div.innerHTML = `
        <div class="order-info">
            <h4>#${order.orderNumber || orderId.substring(0, 8)}</h4>
            <p><i class="fas fa-user"></i> ${order.customerName || 'N/A'}</p>
            <p><i class="fas fa-phone"></i> ${order.customerPhone || 'N/A'}</p>
            <p><i class="fas fa-map-marker-alt"></i> ${order.wilaya || 'N/A'}</p>
            <p><i class="fas fa-clock"></i> ${date}</p>
        </div>
        <div class="order-summary">
            <div class="order-total">${order.total || '0'} DA</div>
            <div class="order-status">
                <span class="status-badge status-${statusClass}">${statusText}</span>
            </div>
            <button class="btn btn-sm btn-info" onclick="viewOrder('${orderId}')">
                <i class="fas fa-eye"></i> Voir
            </button>
        </div>
    `;
    
    return div;
}

// Fonction pour charger toutes les commandes
async function loadOrders() {
    console.log('üõí Chargement de toutes les commandes...');
    
    try {
        const ordersSnapshot = await firebase.firestore()
            .collection('orders')
            .orderBy('createdAt', 'desc')
            .get();

        orders = [];
        ordersSnapshot.forEach(doc => {
            orders.push({ id: doc.id, ...doc.data() });
        });

        console.log('üìä Nombre total de commandes:', orders.length);
        displayOrders();

    } catch (error) {
        console.error('‚ùå Erreur lors du chargement des commandes:', error);
        showError('Erreur lors du chargement des commandes: ' + error.message);
    }
}

// Fonction pour afficher les commandes
function displayOrders() {
    console.log('üìã Affichage des commandes...');
    const tbody = document.getElementById('ordersTableBody');
    if (!tbody) {
        console.error('‚ùå √âl√©ment ordersTableBody non trouv√©');
        return;
    }

    tbody.innerHTML = '';

    if (orders.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" style="text-align: center;">Aucune commande trouv√©e</td></tr>';
        console.log('‚ÑπÔ∏è Aucune commande √† afficher');
        return;
    }

    console.log('üìù Affichage de', orders.length, 'commandes');
    orders.forEach((order, index) => {
        console.log(`üìÑ Commande ${index + 1}:`, order);
        const row = createOrderRow(order);
        tbody.appendChild(row);
    });
}

// Fonction pour cr√©er une ligne de commande
function createOrderRow(order) {
    const tr = document.createElement('tr');
    
    const date = order.createdAt ? order.createdAt.toDate().toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    }) : 'N/A';
    
    const statusClass = order.status || 'pending';
    const statusText = getStatusText(order.status);
    
    // Calculer le nombre d'articles
    const totalItems = order.items ? order.items.reduce((sum, item) => sum + (item.quantity || 1), 0) : 0;
    
    // Ordre des colonnes: Checkbox, ID, Client, Wilaya, Total, Statut, Date, Actions
    tr.innerHTML = `
        <td><input type="checkbox" class="order-checkbox" data-order-id="${order.id}"></td>
        <td><strong>#${order.orderNumber || order.id.substring(0, 8)}</strong></td>
        <td>
            <div class="customer-info">
                <div><i class="fas fa-user"></i> ${order.customerName || 'N/A'}</div>
                <div><i class="fas fa-phone"></i> ${order.customerPhone || 'N/A'}</div>
            </div>
        </td>
        <td><i class="fas fa-map-marker-alt"></i> ${order.wilaya || 'N/A'}</td>
        <td>
            <div class="order-details">
                <div class="total-amount"><strong>${order.total || '0'} DA</strong></div>
                <small>${totalItems} article(s)</small>
            </div>
        </td>
        <td><span class="status-badge status-${statusClass}">${statusText}</span></td>
        <td>
            <div class="date-info">
                <div>${date.split(' ')[0]}</div>
                <small>${date.split(' ')[1] || ''}</small>
            </div>
        </td>
        <td>
            <div class="action-buttons">
                <button class="btn btn-sm btn-info" onclick="viewOrder('${order.id}')" title="Voir d√©tails">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="btn btn-sm btn-warning" onclick="editOrderStatus('${order.id}')" title="Modifier statut">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-danger" onclick="deleteOrder('${order.id}')" title="Supprimer">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </td>
    `;
    
    return tr;
}

// Fonctions utilitaires
function getStatusText(status) {
    const statuses = {
        pending: 'En attente',
        processing: 'En cours',
        completed: 'Termin√©e',
        cancelled: 'Annul√©e'
    };
    return statuses[status] || status;
}

// Fonctions expos√©es globalement
window.viewOrder = function(orderId) {
    console.log('üëÅÔ∏è Voir commande:', orderId);
    const order = orders.find(o => o.id === orderId);
    if (order) {
        console.log('üìÑ D√©tails de la commande:', order);
        alert('Commande: ' + (order.customerName || 'N/A') + ' - ' + (order.total || '0') + ' DA');
    }
};

window.editOrderStatus = function(orderId) {
    console.log('‚úèÔ∏è Modifier statut commande:', orderId);
    alert('Fonctionnalit√© de modification du statut en d√©veloppement');
};

window.deleteOrder = function(orderId) {
    console.log('üóëÔ∏è Supprimer commande:', orderId);
    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette commande ?')) {
        alert('Fonctionnalit√© de suppression en d√©veloppement');
    }
};

// Navigation basique
function handleNavigation(e) {
    e.preventDefault();
    console.log('üß≠ Navigation cliqu√©e');
    
    const sectionName = e.target.getAttribute('data-section');
    console.log('üìç Section:', sectionName);
    
    if (!sectionName) return;

    // Mettre √† jour le menu actif
    document.querySelectorAll('.menu-item').forEach(item => {
        item.classList.remove('active');
    });
    e.target.classList.add('active');

    // Afficher la section correspondante
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.remove('active');
    });
    
    const sectionElement = document.getElementById(sectionName + 'Section');
    if (sectionElement) {
        sectionElement.classList.add('active');
        console.log('‚úÖ Section affich√©e:', sectionName);
    } else {
        console.error('‚ùå Section non trouv√©e:', sectionName + 'Section');
    }

    // Mettre √† jour le titre de la page
    const titles = {
        dashboard: 'Dashboard',
        products: 'Gestion des Produits',
        orders: 'Gestion des Commandes',
        account: 'Mon Compte',
        analytics: 'Statistiques',
        settings: 'Param√®tres'
    };
    
    const pageTitleElement = document.getElementById('pageTitle');
    if (pageTitleElement) {
        pageTitleElement.textContent = titles[sectionName] || sectionName;
        console.log('‚úÖ Titre mis √† jour:', titles[sectionName] || sectionName);
    }

    // Charger les donn√©es de la section
    loadSectionData(sectionName);
}

// Fonction pour charger les donn√©es selon la section
function loadSectionData(sectionName) {
    console.log('üìÇ Chargement des donn√©es pour la section:', sectionName);
    
    switch(sectionName) {
        case 'dashboard':
            loadDashboardData();
            break;
        case 'orders':
            loadOrders();
            break;
        case 'products':
            console.log('üì¶ Section produits - fonctionnalit√© √† impl√©menter');
            break;
        case 'analytics':
            console.log('üìä Section analytics - fonctionnalit√© √† impl√©menter');
            break;
        case 'account':
            console.log('üë§ Section compte - fonctionnalit√© √† impl√©menter');
            break;
        case 'settings':
            console.log('‚öôÔ∏è Section param√®tres - fonctionnalit√© √† impl√©menter');
            break;
        default:
            console.log('‚ùì Section inconnue:', sectionName);
    }
}

// Fonctions d'affichage des messages
function showError(message) {
    console.error('‚ùå', message);
    alert('Erreur: ' + message);
}

function showSuccess(message) {
    console.log('‚úÖ', message);
    alert('Succ√®s: ' + message);
}

function showLoading(message) {
    console.log('‚è≥', message);
    // Impl√©mentation basique du loading
}

function hideLoading() {
    console.log('‚úÖ Loading termin√©');
    // Impl√©mentation basique du loading
}

console.log('‚úÖ Admin panel debug initialis√©');